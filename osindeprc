#!/bin/bash

DEBUG=1 #0 true, 1 false
PLATFORM=$(uname)
####
#HELPER FUNCTIONS
####
inPath() { 
#returns 0 if true, else 1
    #Create array from Path
    tmpPaths=( $(echo $PATH|tr ':' ' ') )
    #echo $tmpPaths
    occurences=0
    for i in ${tmpPaths[@]}; do
        [[ $1 == $i ]] && occurences=$((occurences+1))
        [[ $occurences -eq 1 ]] && ret=0; break
    done
    
    [[ $ret -eq 0 ]] && echo $ret || echo 1
};

setVariable() {
    #USAGE Expl. f. setVariable $1 $2 $3
    #setVariable WINEDEBUG "warn-all" wine //$3 is supplied so so it will be checked for
    #via ${3:-${2}} #NOTE: ${var:-x} substitutes x for var if var unset OR empty.
    #USAGE Expl. f. setVariable $1 $2
    #setVariable EDITOR vi //$3 does not exist so it will be checked for $2
    
    [[ -f $(which ${3:-${2}}) ]] \
    && export $1=$2 \
    || { [[ $DEBUG -eq 0 ]] && echo "Problem with export $1=$2\n$2 not installed" }
    
} ;

#USAGE EXAMPLE:
#setPath /opt/local/bin/port /opt/local/bin:/opt/local/sbin
# => [[ -d /opt/local/bin/port ]] && export /opt/local/...:$PATH
setPath() { [ -d $1 ] && export PATH=$2:$PATH };

setAlias() { 
    [[ -x $2 ]] \
    && alias $1="$2" \
    || { [[ $DEBUG -eq 0 ]] && echo "$2 is not installed" } 
};

setEvals() {
    for i in $@;do
        eval $i
    done
};

#Map-Function. Usage example: map func2apply array on whose elements to apply func on.
map() {
    for i in $2; do
        $1 $(echo $i|tr '@' ' ')
    done    
}


####
#OS INDEPENDENT STUFF
####
[ -f $HOME/.env ] && {
    #VARIABLES DEPENDING ON COMMANDS BEING PRESENT
    #Made conditional because of reliance on variables declared in $HOME/.env
    . $HOME/.env
    setVariable WINEDEBUG "warn-all,relay-all,err-all" wine
    setVariable EDITOR $EDITOR
    setVariable VISUAL $VISUAL
} || echo "$HOME/.env does not exist. Is this intended?" 1&>2 ;

# set PATH so it includes user's private bin if it exists.
#NOTE: inPath is required since it seems to be set from somewhere else on some systems.
[[ -d "$HOME/bin" ]] && [[ ! $(inPath "$HOME/bin") -eq 0 ]] && PATH="$HOME/bin:$PATH"


###PLOWING A PATH TO THE BINS
    case $PLATFORM in
        "Darwin") 
            [ -f $HOME/.env-mac ] \
            && {
                source $HOME/.env-mac 
                map setPath $macPaths
                map setAlias $macAliases
                map setVariable $macVariables
            } || echo "$HOME/.env-mac does not exist. is this intended?" 1&>2
            ;;
        "Linux")
            ;;
        "FreeBSD")
            #setALIASES $freebsdAliases
            setEvals $freebsdEvals
            ;;
    esac


####
#STUFF TO COMPLEX TO PROCESS IN BATCH. I.E. CUSTOM FUNCTIONS
####

#ZFS SPECIFIC STUFF
[ -f /usr/sbin/zpool ] && {
    plattform=$(uname)
    
    case $plattform in 
        "Linux")
            defaultPath="/run/media/$(whoami)/ZFS"  
            group="users"
            ;;
        "Darwin")
            defaultPath="/Volumes/ZFS" 
            ;;
        *)
            defaultPath="/mnt/ZFS" 
            ;;
    esac
    
    zpooli() {  
        [ ! -d $defaultPath ] && sudo mkdir $defaultPath
        sudo zpool import -a ${1} -N -R $defaultPath 
        pools=()
        mounts=()
        for i in $(sudo zfs list|tail -n+2|cut -d ' ' -f 1); do
            pools=( ${pools[@]} $i )
        done
        for i in $(sudo zfs list|tail -n+2|cut -d ' ' -f 9); do
            mounts=( ${mounts[@]} $i  )
        done
        for (( i=1;i<=${#pools[@]};i++ )) ; do
            sudo zfs mount ${pools[$i]}
            sudo chown $(whoami) ${mounts[$i]}
            sudo chgrp $group    ${mounts[$i]}
        done
    } ;
    
    alias zpoole="sudo zpool export -a" 
}

#!/bin/bash

DEBUG=1 #0 true, 1 false
PLATFORM=$(uname)
####
#HELPER FUNCTIONS
####
inPath() { [[ $PATH =~ $"$1" ]] && echo $? || echo $? ; };

removeDoublettesInPath() { export PATH=$(echo $PATH|tr ':' '\n'|uniq|tr '\n' ':') ; }

setVariable() {
    #USAGE Expl. f. setVariable $1 $2 $3
    #setVariable WINEDEBUG "warn-all" wine //$3 is supplied so so it will be checked for
    #via ${3:-${2}} #NOTE: ${var:-x} substitutes x for var if var unset OR empty.
    #USAGE Expl. f. setVariable $1 $2
    #setVariable EDITOR vi //$3 does not exist so it will be checked for $2
	local name=${1%@*}  #substring 0 to @-separator
	local value=${1#*@} #substring @-separator to end.
    which ${3:-${value}} &>/dev/null
    [[ $? -eq 0 ]] \
    && export ${1}=${value} \
    || { [[ $DEBUG -eq 0 ]] && echo "Problem with export ${name}=${value}\n${3:${value}} not installed" ; }
    
} ;

#USAGE EXAMPLE:
#setPath /opt/local/bin/port@/opt/local/bin:/opt/local/sbin
# => [[ -d /opt/local/bin/port ]] && export /opt/local/...:$PATH
setPath() { 
	local dir=${1%@*}  #substring 0 to @-separator
	local path=${1#*@} #substring @-separator to end.
	[ -d $dir ] && export PATH=$path:$PATH ; 
};

setAlias() { 
	local -a list=($(echo $1|tr '@' ' '))
    [[ -x ${list[2]:-${list[1]}} ]] || [[ $(which ${list[2]:-${list[1]}}) ]] \
    && alias ${list[0]}="${list[1]}" \
    || { [[ $DEBUG -eq 0 ]] && echo "${list[1]} is not installed" ; } 
};

setEvals() {
    for i in $@;do
        eval $i
    done
};

#Map-Function. Usage example: map func2apply array on whose elements to apply func on.
map() {
	local    func=$1
	local -a list=${!2}
    for line in ${list[@]}; do
		$func $line
       #$1 $(echo $i|tr '@' ' ')
    done    
}

####
#OS INDEPENDENT STUFF
####
[ -e $HOME/.env ] && {
    #VARIABLES DEPENDING ON COMMANDS BEING PRESENT
    #Made conditional because of reliance on variables declared in $HOME/.env
    . $HOME/.env ;
    setVariable WINEDEBUG "warn-all,relay-all,err-all" wine ;
    #setVariable EDITOR $EDITOR
    #setVariable VISUAL $VISUAL
} #|| echo "$HOME/.env does not exist. Is this intended?" ;

# set PATH so it includes user's private bin if it exists.
#NOTE: inPath() is required since it seems to be set from somewhere else on some systems.
#[[ -d "$HOME/bin" ]] && [[ ! $(inPath "$HOME/bin") -eq 0 ]] && PATH="$HOME/bin:$PATH" 


###PLOWING A PATH TO THE BINS
    case $PLATFORM in
        "Darwin") 
            [ -e $HOME/.env-mac ] \
            && {
                source $HOME/.env-mac
                map setPath macPaths[@]
                map setAlias macAliases[@]
                map setVariable macVariables[@]
				removeDoublettesInPath
            } #|| echo "$HOME/.env-mac does not exist. is this intended?" 1&>2
            ;;
        "Linux")
            [ -e $HOME/.env-linux ] \
            && {
                source $HOME/.env-linux
                map setAlias linuxAliases[@]
                map setPath linuxPaths[@]
                map setVariable linuxVariables[@]
                removeDoublettesInPath
            }
            ;;
        "FreeBSD")
            #setALIASES $freebsdAliases
            setEvals $freebsdEvals
            ;;
    esac

#Cleanup Functions so they don't remain globally available after rc-stuff is done.	
unset setAlias
unset setPath
unset setVariable
unset setEvals
unset inPath
unset removeDoublettesInPath
unset map

####
#STUFF TO COMPLEX TO PROCESS IN BATCH. I.E. CUSTOM FUNCTIONS
####

#if [ ! -S ~/.ssh/ssh_auth_sock ]; then
#  eval `ssh-agent`
#  ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
#  ssh-add ~/.ssh/id_rsa
#fi
#export SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock
#ssh-add -l > /dev/null || ssh-add
SSH_ASKPASS=/usr/lib/ssh/ksshaskpass 
ssh-add $HOME/.ssh/id_rsa $HOME/.ssh/id_work_thm </dev/null
#[ -e $HOME/.zpool.sh ] && source $HOME/.zpool.sh
